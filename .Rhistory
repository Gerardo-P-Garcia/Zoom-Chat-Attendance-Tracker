data_directory <- "C:/Users/Shadow/Documents/Data/Bathroom Log Argosy"
files <- list.files(data_directory)
# attach date variable here, not in function
# Name of file/date of log
date <- tools::file_path_sans_ext(files[i])
# Check and install missing libraries
list.of.packages <- c("ggplot2","dplyr", "DT", "readxl", "stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[
,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Remove temporary variables
rm(list.of.packages)
rm(new.packages)
# Manual packages (run once)
# remotes::install_github("juba/rmdformats")
knitr::opts_chunk$set(comment = NA, message = FALSE, warning = FALSE, echo=TRUE)
# Get raw text
#library(readtext)
#raw_text <- readtext('~/Data/Bathroom Log Argosy/15_9_2020')
algorithm <- function(x){
library(readtext)
require(dplyr)
# Gather input
date <- gsub('_', '/', x)
date <- as.Date(date, "%d/%m/%y")
x <- paste('~/Data/Bathroom Log Argosy/', x, sep='')
raw_text <- readtext(x)
# Split into rows
cleaner_text <- data.frame(c(strsplit(raw_text$text, '//')))
colnames(cleaner_text) = c('names')
# Extract time numerical
#cleaner_text$time <- as.numeric(gsub("\\D+", "", cleaner_text$names))
cleaner_text$time <- gsub("[^0-9:]+", "", cleaner_text$names)
# Remove rows without time (non log entries)
cleaner_text <- cleaner_text[!is.na(cleaner_text$time),]
cleaner_text <- cleaner_text[cleaner_text$time!='',]
#cleaner_text$time <- gsub("[a-zA-Z ]", "", cleaner_text$names)
# Remove at first numeric in name and onward
cleaner_text$names <- gsub( "[0-9].*$", "", cleaner_text$names )
# Remove leading and trailing white space
cleaner_text$names <- stringr::str_trim(cleaner_text$names, side='left')
cleaner_text$names <- stringr::str_trim(cleaner_text$names, side='right')
# Hard-code revision
cleaner_text$names[cleaner_text$names=='E. Januario'] <- 'Evan J.'
# Gather last initial
cleaner_text$last_initial <- ''
for(i in 1:nrow(cleaner_text)){
if(grepl(' ', cleaner_text$names[i])){
cleaner_text$last_initial[i] <- cleaner_text$names[i]
}
}
cleaner_text$last_initial <- gsub(".* ","",cleaner_text$last_initial)
# Keep first name without initial
cleaner_text$names <- gsub(" .*","",cleaner_text$names)
# Remove period
cleaner_text$last_initial <- gsub('[.]', '', cleaner_text$last_initial)
# Double-check capitalizations
cleaner_text$last_initial <- toupper(cleaner_text$last_initial)
# Keep time before second occurence of : (hard-code)
cleaner_text$time <- gsub("(\\:.*?)\\:", "\\1", cleaner_text$time)
# Convert strings to time format
cleaner_text$time <- substr(as.POSIXct(cleaner_text$time, format='%I:%M'), 12, 16)
# Gather today's date
#cleaner_text$date <- Sys.Date()
cleaner_text$date <- date
# Reorder
cleaner_text <- cleaner_text[,c(1, 3, 2, 4)]
cleaner_text <- cleaner_text[order(cleaner_text$time),]
# Rename
cleaner_text <- rename(
cleaner_text,
first_name=names)
return(cleaner_text)
}
library(readtext)
data_directory <- "C:/Users/Shadow/Documents/Data/Bathroom Log Argosy"
files <- list.files(data_directory)
# Empty data frame
list_names <- data.frame(
'first_name'=c(),
'last_initial'=c(),
'time'=c(),
'date'=c()
)
for(i in 1:length(files)){
date <- tools::file_path_sans_ext(files[i])
new_row <- algorithm(date)
list_names <- rbind(list_names, new_row)
}
# still need to figure out thwat to dow iththis below and date too
# date <- tools::file_path_sans_ext(files[i])
# date <- paste(date)
# data <- readtext(paste(data_directory, files[i], sep="/")) #, header = FALSE)
# Create table
list_names <- DT::datatable(cleaner_text,
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf'),
pageLength=10,
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))),
rownames = FALSE)
list_names
# Create table
list_names <- DT::datatable(list_names,
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf'),
pageLength=10,
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))),
rownames = FALSE)
list_names
weekdays(files[1])
i
files[1]
as.Date("14/9/2020", "%d/%m/%y")
test <- as.Date("14/9/2020", "%d/%m/%y")
weekdays(test)
# Check and install missing libraries
list.of.packages <- c("ggplot2","dplyr", "DT", "readxl", "stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[
,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Remove temporary variables
rm(list.of.packages)
rm(new.packages)
# Manual packages (run once)
# remotes::install_github("juba/rmdformats")
knitr::opts_chunk$set(comment = NA, message = FALSE, warning = FALSE, echo=TRUE)
# Get raw text
#library(readtext)
#raw_text <- readtext('~/Data/Bathroom Log Argosy/15_9_2020')
algorithm <- function(x){
library(readtext)
require(dplyr)
# Gather input
date <- gsub('_', '/', x)
date <- as.Date(date, "%d/%m/%y")
x <- paste('~/Data/Bathroom Log Argosy/', x, sep='')
raw_text <- readtext(x)
# Split into rows
cleaner_text <- data.frame(c(strsplit(raw_text$text, '//')))
colnames(cleaner_text) = c('names')
# Extract time numerical
#cleaner_text$time <- as.numeric(gsub("\\D+", "", cleaner_text$names))
cleaner_text$time <- gsub("[^0-9:]+", "", cleaner_text$names)
# Remove rows without time (non log entries)
cleaner_text <- cleaner_text[!is.na(cleaner_text$time),]
cleaner_text <- cleaner_text[cleaner_text$time!='',]
#cleaner_text$time <- gsub("[a-zA-Z ]", "", cleaner_text$names)
# Remove at first numeric in name and onward
cleaner_text$names <- gsub( "[0-9].*$", "", cleaner_text$names )
# Remove leading and trailing white space
cleaner_text$names <- stringr::str_trim(cleaner_text$names, side='left')
cleaner_text$names <- stringr::str_trim(cleaner_text$names, side='right')
# Hard-code revision
cleaner_text$names[cleaner_text$names=='E. Januario'] <- 'Evan J.'
# Gather last initial
cleaner_text$last_initial <- ''
for(i in 1:nrow(cleaner_text)){
if(grepl(' ', cleaner_text$names[i])){
cleaner_text$last_initial[i] <- cleaner_text$names[i]
}
}
cleaner_text$last_initial <- gsub(".* ","",cleaner_text$last_initial)
# Keep first name without initial
cleaner_text$names <- gsub(" .*","",cleaner_text$names)
# Remove period
cleaner_text$last_initial <- gsub('[.]', '', cleaner_text$last_initial)
# Double-check capitalizations
cleaner_text$last_initial <- toupper(cleaner_text$last_initial)
# Keep time before second occurence of : (hard-code)
cleaner_text$time <- gsub("(\\:.*?)\\:", "\\1", cleaner_text$time)
# Convert strings to time format
cleaner_text$time <- substr(as.POSIXct(cleaner_text$time, format='%I:%M'), 12, 16)
# Gather today's date
#cleaner_text$date <- Sys.Date()
cleaner_text$date <- date
# day of the week
cleaner_text$weekday <- weekdays(cleaner_text$date)
# Reorder
cleaner_text <- cleaner_text[,c(1, 3, 2, 4, 5)]
cleaner_text <- cleaner_text[order(cleaner_text$time),]
# Rename
cleaner_text <- rename(
cleaner_text,
first_name=names)
return(cleaner_text)
}
library(readtext)
data_directory <- "C:/Users/Shadow/Documents/Data/Bathroom Log Argosy"
files <- list.files(data_directory)
# Empty data frame
list_names <- data.frame(
'first_name'=c(),
'last_initial'=c(),
'time'=c(),
'date'=c()
)
for(i in 1:length(files)){
date <- tools::file_path_sans_ext(files[i])
new_row <- algorithm(date)
list_names <- rbind(list_names, new_row)
}
# still need to figure out thwat to dow iththis below and date too
# date <- tools::file_path_sans_ext(files[i])
# date <- paste(date)
# data <- readtext(paste(data_directory, files[i], sep="/")) #, header = FALSE)
# Create table
list_names <- DT::datatable(list_names,
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf'),
pageLength=10,
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))),
rownames = FALSE)
list_names
# Check and install missing libraries
list.of.packages <- c("ggplot2","dplyr", "DT", "readxl", "stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[
,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Remove temporary variables
rm(list.of.packages)
rm(new.packages)
# Manual packages (run once)
# remotes::install_github("juba/rmdformats")
knitr::opts_chunk$set(comment = NA, message = FALSE, warning = FALSE, echo=TRUE)
# Get raw text
#library(readtext)
#raw_text <- readtext('~/Data/Bathroom Log Argosy/15_9_2020')
algorithm <- function(x){
library(readtext)
require(dplyr)
# Gather input
date <- gsub('_', '/', x)
date <- as.Date(date, "%d/%m/%y")
x <- paste('~/Data/Bathroom Log Argosy/', x, sep='')
raw_text <- readtext(x)
# Split into rows
cleaner_text <- data.frame(c(strsplit(raw_text$text, '//')))
colnames(cleaner_text) = c('names')
# Extract time numerical
#cleaner_text$time <- as.numeric(gsub("\\D+", "", cleaner_text$names))
cleaner_text$time <- gsub("[^0-9:]+", "", cleaner_text$names)
# Remove rows without time (non log entries)
cleaner_text <- cleaner_text[!is.na(cleaner_text$time),]
cleaner_text <- cleaner_text[cleaner_text$time!='',]
#cleaner_text$time <- gsub("[a-zA-Z ]", "", cleaner_text$names)
# Remove at first numeric in name and onward
cleaner_text$names <- gsub( "[0-9].*$", "", cleaner_text$names )
# Remove leading and trailing white space
cleaner_text$names <- stringr::str_trim(cleaner_text$names, side='left')
cleaner_text$names <- stringr::str_trim(cleaner_text$names, side='right')
# Hard-code revision
cleaner_text$names[cleaner_text$names=='E. Januario'] <- 'Evan J.'
# Gather last initial
cleaner_text$last_initial <- ''
for(i in 1:nrow(cleaner_text)){
if(grepl(' ', cleaner_text$names[i])){
cleaner_text$last_initial[i] <- cleaner_text$names[i]
}
}
cleaner_text$last_initial <- gsub(".* ","",cleaner_text$last_initial)
# Keep first name without initial
cleaner_text$names <- gsub(" .*","",cleaner_text$names)
# Remove period
cleaner_text$last_initial <- gsub('[.]', '', cleaner_text$last_initial)
# Double-check capitalizations
cleaner_text$last_initial <- toupper(cleaner_text$last_initial)
# Keep time before second occurence of : (hard-code)
cleaner_text$time <- gsub("(\\:.*?)\\:", "\\1", cleaner_text$time)
# Convert strings to time format
cleaner_text$time <- substr(as.POSIXct(cleaner_text$time, format='%I:%M'), 12, 16)
# Gather today's date
#cleaner_text$date <- Sys.Date()
cleaner_text$date <- date
# day of the week
cleaner_text$weekday <- weekdays(cleaner_text$date)
# Reorder
cleaner_text <- cleaner_text[,c(1, 3, 2, 4, 5)]
cleaner_text <- cleaner_text[order(cleaner_text$time),]
# Rename
cleaner_text <- rename(
cleaner_text,
first_name=names)
return(cleaner_text)
}
library(readtext)
data_directory <- "C:/Users/Shadow/Documents/Data/Bathroom Log Argosy"
files <- list.files(data_directory)
# Empty data frame
list_names <- data.frame(
'first_name'=c(),
'last_initial'=c(),
'time'=c(),
'date'=c()
)
for(i in 1:length(files)){
date <- tools::file_path_sans_ext(files[i])
new_row <- algorithm(date)
list_names <- rbind(list_names, new_row)
}
# still need to figure out thwat to dow iththis below and date too
# date <- tools::file_path_sans_ext(files[i])
# date <- paste(date)
# data <- readtext(paste(data_directory, files[i], sep="/")) #, header = FALSE)
# Create table
list_names <- DT::datatable(list_names,
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf'),
pageLength=10,
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))),
rownames = FALSE)
list_names
# Check and install missing libraries
list.of.packages <- c("ggplot2","dplyr", "DT", "readxl", "stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[
,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Remove temporary variables
rm(list.of.packages)
rm(new.packages)
# Manual packages (run once)
# remotes::install_github("juba/rmdformats")
knitr::opts_chunk$set(comment = NA, message = FALSE, warning = FALSE, echo=TRUE)
# Get raw text
#library(readtext)
#raw_text <- readtext('~/Data/Bathroom Log Argosy/15_9_2020')
algorithm <- function(x){
library(readtext)
require(dplyr)
# Gather input
date <- gsub('_', '/', x)
date <- as.Date(date, "%d/%m/%y")
x <- paste('~/Data/Bathroom Log Argosy/', x, sep='')
raw_text <- readtext(x)
# Split into rows
cleaner_text <- data.frame(c(strsplit(raw_text$text, '//')))
colnames(cleaner_text) = c('names')
# Extract time numerical
#cleaner_text$time <- as.numeric(gsub("\\D+", "", cleaner_text$names))
cleaner_text$time <- gsub("[^0-9:]+", "", cleaner_text$names)
# Remove rows without time (non log entries)
cleaner_text <- cleaner_text[!is.na(cleaner_text$time),]
cleaner_text <- cleaner_text[cleaner_text$time!='',]
#cleaner_text$time <- gsub("[a-zA-Z ]", "", cleaner_text$names)
# Remove at first numeric in name and onward
cleaner_text$names <- gsub( "[0-9].*$", "", cleaner_text$names )
# Remove leading and trailing white space
cleaner_text$names <- stringr::str_trim(cleaner_text$names, side='left')
cleaner_text$names <- stringr::str_trim(cleaner_text$names, side='right')
# Hard-code revision
cleaner_text$names[cleaner_text$names=='E. Januario'] <- 'Evan J.'
# Gather last initial
cleaner_text$last_initial <- ''
for(i in 1:nrow(cleaner_text)){
if(grepl(' ', cleaner_text$names[i])){
cleaner_text$last_initial[i] <- cleaner_text$names[i]
}
}
cleaner_text$last_initial <- gsub(".* ","",cleaner_text$last_initial)
# Keep first name without initial
cleaner_text$names <- gsub(" .*","",cleaner_text$names)
# Remove period
cleaner_text$last_initial <- gsub('[.]', '', cleaner_text$last_initial)
# Double-check capitalizations
cleaner_text$last_initial <- toupper(cleaner_text$last_initial)
# Keep time before second occurence of : (hard-code)
cleaner_text$time <- gsub("(\\:.*?)\\:", "\\1", cleaner_text$time)
# Convert strings to time format
cleaner_text$time <- substr(as.POSIXct(cleaner_text$time, format='%I:%M'), 12, 16)
# Gather today's date
#cleaner_text$date <- Sys.Date()
cleaner_text$date <- date
# day of the week
cleaner_text$weekday <- weekdays(cleaner_text$date)
# Reorder
cleaner_text <- cleaner_text[,c(1, 3, 2, 4, 5)]
cleaner_text <- cleaner_text[order(cleaner_text$time),]
# Rename
cleaner_text <- rename(
cleaner_text,
first_name=names)
return(cleaner_text)
}
library(readtext)
data_directory <- "C:/Users/Shadow/Documents/Data/Bathroom Log Argosy"
files <- list.files(data_directory)
# Empty data frame
list_names <- data.frame(
'first_name'=c(),
'last_initial'=c(),
'time'=c(),
'date'=c()
)
for(i in 1:length(files)){
date <- tools::file_path_sans_ext(files[i])
new_row <- algorithm(date)
list_names <- rbind(list_names, new_row)
}
# still need to figure out thwat to dow iththis below and date too
# date <- tools::file_path_sans_ext(files[i])
# date <- paste(date)
# data <- readtext(paste(data_directory, files[i], sep="/")) #, header = FALSE)
# Create table
list_names <- DT::datatable(list_names,
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf'),
pageLength=10,
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))),
rownames = FALSE)
list_names
nrow(list_names)
list_names
shiny::runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
runApp('R Projects/attendance_list')
install.packages('shinyfiles')
install.packages('shinyFiles')
library(shinyFiles)
shinyFiles()
shinyFiles::shinyFilesExample()
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
shinyFiles::shinyFilesExample()
runApp('~/R Projects/zoom_data')
shinyFiles::shinyFilesExample()
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
DT::datatable('hello')
DT::datatable(c('hello', 'world'))
DT::datatable(data.frame(c('hello'), c('world')))
DT::datatable(data.frame('Empty'=c('hello'), 'Table'=c('world')))
DT::datatable(data.frame('Empty'=c('Find your folder containing your chat data'), 'Table'=c('world')))
DT::datatable(data.frame('Empty'=c('<b>Find your folder containing your chat data</b>'), 'Table'=c('world')))
DT::datatable(data.frame('Empty'=c('Find your folder containing your chat data'), 'Table'=c('The file within should be called \'my_meeting_chat\'')))
DT::datatable(data.frame('Empty'=c('Find your folder containing your chat data'), 'Table'=c('The file within should be called \'my_saved_chat\'')))
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
library(shinydashboard)
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
runApp('~/R Projects/zoom_data')
setwd("~/R Projects/Zoom-Chat-Attendance-Tracker")
library(rsconnect)
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
